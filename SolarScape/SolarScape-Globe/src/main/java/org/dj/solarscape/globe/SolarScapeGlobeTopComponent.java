/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.dj.solarscape.globe;

import org.dj.editor.api.EditorController;
import org.dj.editor.api.EditorService;
import org.dj.solarscape.globe.Bundle;
import org.dj.worldwindmodel.globeviewer.api.GlobeController;
import org.dj.worldwindmodel.globeviewer.api.GlobeService;
import org.dj.worldwindmodel.globeviewer.api.GlobeServiceProvider;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//org.dj.solarscape.globe//SolarScapeGlobe//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "SolarScapeGlobeTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "org.dj.solarscape.globe.SolarScapeGlobeTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_SolarScapeGlobeAction",
preferredID = "SolarScapeGlobeTopComponent")
@Messages({
    "CTL_SolarScapeGlobeAction=SolarScapeGlobe",
    "CTL_SolarScapeGlobeTopComponent=SolarScapeGlobe Window",
    "HINT_SolarScapeGlobeTopComponent=This is a SolarScapeGlobe window"
})
public final class SolarScapeGlobeTopComponent extends TopComponent {
    
    private static final SolarPlantGlobe sPG = Lookup.getDefault().lookup(SolarPlantGlobe.class);
    private static final GlobeService gS = Lookup.getDefault().lookup(GlobeService.class);
    private final GlobeController eC;
    
    public SolarScapeGlobeTopComponent() {
        
        initComponents();
        setName(Bundle.CTL_SolarScapeGlobeTopComponent());
        setToolTipText(Bundle.HINT_SolarScapeGlobeTopComponent());
        eC = gS.createObject(sPG);
        
        this.add(eC.getComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.GridLayout(1, 0));
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
